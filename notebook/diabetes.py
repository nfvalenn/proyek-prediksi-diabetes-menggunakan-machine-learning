# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fzG2feeb_CUtqbQeeGadmH7FUgi4ZW3m

# Prediksi Diabetes Menggunakan Machine Learning

Notebook ini mengeksplorasi dan membangun model ML untuk memprediksi apakah seseorang mengidap diabetes berdasarkan dataset Pima Indian Diabetes.

## 1. Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

import pickle

"""## 2. Load Dataset"""

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d uciml/pima-indians-diabetes-database
!unzip pima-indians-diabetes-database.zip

df = pd.read_csv('diabetes.csv')
df.head()

"""## 3. EDA (Exploratory Data Analysis)

**Periksa Info DataSet**
"""

df.info()

"""**Statistik Deskriptif**"""

df.describe()

"""**Periksa Missing Values**"""

df.isnull().sum()

"""**Periksa Duplikasi Data**"""

print("Jumlah Duplikasi Data :", df.duplicated().sum())

"""**Distribusi Tiap Fitur**"""

df.hist(figsize=(15,10))
plt.tight_layout()
plt.show()

"""**Distribusi Target (Outcome)**"""

df['Outcome'].value_counts().plot(kind='bar', title='Distribusi Outcome (0: Tidak Diabetes, 1: Diabetes)')

"""**Korelasi Antar Fitur**"""

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

"""**Boxplot untuk Mendeteksi Outlier**"""

for col in df.columns[:-1]:
    sns.boxplot(data=df, x='Outcome', y=col)
    plt.title(f'{col} vs Outcome')
    plt.show()

"""**Pairplot**"""

sns.pairplot(df, hue='Outcome')

"""## 4. Data Preparation"""

cols_to_replace = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
df[cols_to_replace] = df[cols_to_replace].replace(0, np.nan)

print(df.isnull().sum())

# Imputasi NaN dengan median
df[cols_to_replace] = df[cols_to_replace].fillna(df[cols_to_replace].median())

scaler = StandardScaler()
X_scaled = scaler.fit_transform(df.drop('Outcome', axis=1))

X = df.drop('Outcome', axis=1)
y = df['Outcome']

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42, stratify=y)

"""## 5. Modeling & Evaluasi

**a. Logistic Regression**
"""

lr = LogisticRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)
print("Logistic Regression\n", classification_report(y_test, y_pred_lr))

"""**b. Random Forest**"""

rf = RandomForestClassifier()
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)
print("Random Forest\n", classification_report(y_test, y_pred_rf))

"""**c. SVM**"""

svm = SVC()
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)
print("SVM\n", classification_report(y_test, y_pred_svm))

"""## 6. Confusion Matrix"""

cm = confusion_matrix(y_test, y_pred_rf)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")

"""## 7. Simpan Model"""

with open("diabetes_model.pkl", "wb") as f:
    pickle.dump(rf, f)

from google.colab import files
files.download("diabetes_model.pkl")

"""## 8. Kesimpulan

- Model Random Forest memberikan akurasi terbaik dengan skor F1 yang seimbang.
- Proyek ini menunjukkan bagaimana machine learning dapat membantu dalam diagnosis awal diabetes.
- Model ini nantinya akan digunakan di aplikasi Streamlit untuk prediksi real-time.

## Download Requirements.txt
"""

from google.colab import files

!pip freeze > requirements.txt
files.download('requirements.txt')